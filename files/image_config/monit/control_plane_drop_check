#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
    This scripts's job is to verify that there are no control plane
    packet drops reported by /proc/net/sofnet_stats.

    The script does does the following:

    This is to be run periodically on a SONiC device using a monit
    configuration file.
"""


import argparse
import os
import sys
import syslog

from swsscommon import swsscommon

APPL_DB_NAME = 'APPL_DB'

os.environ['PYTHONUNBUFFERED'] = 'True'


def write_syslog(message, *args):
    """
    Write a message to syslog.

    :param message: Message string to be logged
    :param args: Optional args
    :return: None
    """

    if args:
        message %= args
    syslog.syslog(syslog.LOG_NOTICE, message)


def get_softnet_dropped_count():
    drop_count = 0
    softnet_stats_file = "/proc/net/softnet_stat"

    percpu_dropped_stats = []
    with open(softnet_stats_file, 'r') as f:
        for line in f:
            if line.strip():  # Ensure the line is not empty
                stat = line.split()
                # Drop count is in the second column for each CPU
                if len(stat) > 1:
                    drop_count += int(stat[1], 16)

    return drop_count


def check_packet_drops():
    """
    The function that checks for packet drops

    :param: None
    :return: True if there are pending entries, False otherwise
    """
    # Path to the file to store the last drop count
    drop_count_stash = '/tmp/softnet_dropped_count.txt'

    # Read the last drop count if drop counts stash file exists
    if os.path.exists(drop_count_stash):
        with open(drop_count_stash, 'r') as f:
            count = f.read().strip()
            last_drop_count = int(count) if count else 0
    else:
    # Initial run. Read drop count, update stash and exit normally
        last_drop_count = get_softnet_dropped_count()
        with open(drop_count_stash, 'w') as f:
            f.write(str(last_drop_count))
        sys.exit(0)

    current_drop_count = get_softnet_dropped_count()

    with open(drop_count_stash, 'w') as f:
        f.write(str(current_drop_count))

    if current_drop_count > last_drop_count:
        write_syslog("Kernel packet drops detected")
        return False
    else:
        write_syslog("All good!!!")
        return True


if __name__ == "__main__":
    res = check_packet_drops()
    sys.exit(0 if res else 1)
